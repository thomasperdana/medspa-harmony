// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered service recommendation flow.
 *
 * This file defines a Genkit flow that takes user input regarding their needs and preferences,
 * analyzes it using an LLM, and recommends suitable medspa services.
 *
 * @param input - An object containing the user's needs and preferences.
 * @returns An object containing a list of recommended services.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendationInputSchema = z.object({
  needs: z.string().describe('A description of the user\u0027s needs and preferences.'),
});
export type RecommendationInput = z.infer<typeof RecommendationInputSchema>;

const RecommendationOutputSchema = z.object({
  recommendedServices: z.array(
    z.string().describe('A list of recommended medspa services based on the user\u0027s needs.')
  ).describe('Recommended services')
});
export type RecommendationOutput = z.infer<typeof RecommendationOutputSchema>;

export async function recommendServices(input: RecommendationInput): Promise<RecommendationOutput> {
  return recommendServicesFlow(input);
}

const recommendServicesPrompt = ai.definePrompt({
  name: 'recommendServicesPrompt',
  input: {schema: RecommendationInputSchema},
  output: {schema: RecommendationOutputSchema},
  prompt: `You are an AI assistant designed to recommend medspa services based on user needs and preferences.  Please read the following description of the user needs and recommend a list of services that would be suitable for them. Return the services as a JSON array of strings.

User Needs: {{{needs}}}`,
});

const recommendServicesFlow = ai.defineFlow(
  {
    name: 'recommendServicesFlow',
    inputSchema: RecommendationInputSchema,
    outputSchema: RecommendationOutputSchema,
  },
  async input => {
    const {output} = await recommendServicesPrompt(input);
    return output!;
  }
);
